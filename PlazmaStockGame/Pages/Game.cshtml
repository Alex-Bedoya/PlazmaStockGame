@page
@model PlazmaStockGame.Pages.GameModel
@using PlazmaStockGame.Models
@{

}
<head>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://rawgithub.com/highcharts/draggable-points/master/draggable-points.js"></script>
    <style>
        .mainPanel {
            box-shadow: 2px 2px 6px 4px lightgrey;
            margin-left: auto;
            margin-right: auto;
            margin-top: 20px;
            min-width: 600px;
            padding: 24px;
            border-radius: 10px;
        }

        .sidePanel {
        }

        .float-end {
            font-size: 1.5em;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        @*user pannel*@
        <div class="col-3 float-start sidePanel">
            <div class="row">
                <div class="col">
                    <label>Welcome to the Game your stock is: @Model.Ticker</label>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2>Current Amount of money you have: @Model.CurrMoney</h2>
                </div>
            </div>
        </div>
        <!--Buy more page-->
        <div class="col-6 mx-auto mainPanel">
            <div class="row mx-auto">
                <label>Welcome to the Game your stock is: @Model.Ticker</label>
                <!--Div that will hold the pie chart-->
                <div id="container" style="height: 400px"></div>
                <div id="drag"></div>
                <div id="drop"></div>
            </div>
            <div class="row mx-auto">
                <p>Please enter an amount of stocks you want to buy:</p>
                <input class="w-25" type="number" id="txtQuantity" name="txtQuantity" min="100" max="10000" onchange="updateSlider(this.value)">
            </div>
            <div class="row mx-auto">
                <label for="myRange">Please select an amount of stocks you want to buy</label>
                <div class="slidecontainer">
                    <input type="range" min="1" max="100" value="0" class="slider" id="myRange" onchange="updateTextInput(this.value)">
                </div>
            </div>
            <div class="row mx-auto sidePanel">
                <div class="col">
                    <div id="result"></div>
                    @Html.AntiForgeryToken()
                    <button id="btnSubmit" class="btn btn-success w-50 mx-auto">Submit</button>
                </div>
            </div>
        </div>
        @*options panel*@
        <div class="col-3 float-end">
            <div class="col">
                <input type="radio" id="buyRadioBtn" name="Options" value="Buy" />
                <label for="buyRadioBtn">Buy</label>
                <input type="radio" id="sellRadioBtn" name="Options" value="Sell" />
                <label for="sellRadioBtn">Sell</label>
                <input type="radio" id="holdRadioBtn" name="Options" value="Hold" />
                <label for="holdRadioBtn">Hold</label>
            </div>
        </div>
    </div>
</body>

<table>
    <tr class="table-header">
        <th>Ticker</th>
        <th>Date</th>
        <th>Cost</th>
    </tr>

    @{
        //foreach (Stock stck in Model.stocks)
        //{
        //    <tr class="table-header">
        //        <th>@stck.Ticker</th>
        //        <th>@stck.Date.ToString()</th>
        //        <th>@stck.Cost</th>
        //    </tr>

        //}

    }
</table>

<p id="startDate"></p>
<p id="currentDate"></p>
<p id="currentBal"></p>
<p id="stocksOwned"></p>
<p id="ownedStocksCost"></p>
<p id="stockPrice"></p>







@section Scripts
    {
    <script type="text/javascript">
        function updateTextInput(val) {
            var purchase = @Model.CurrMoney * (val / 100);
            document.getElementById('txtQuantity').value = purchase;
            changeGraphValue(purchase);
        };
        function updateSlider(val) {
            var percent = (val / @Model.CurrMoney) * 100;
            document.getElementById('myRange').value = percent;
            changeGraphValue(val);
        };
        function changeGraphValue(purchase) {
            remaining = @Model.CurrMoney - purchase;
            var data = google.visualization.arrayToDataTable([
                ['Stock Transaction', 'representation'],
                ['Funds being used', purchase],
                ['Funds Remaining', remaining],
            ]);

            var options = {
                pieHole: 0.5,
                pieSliceTextStyle: {
                    color: 'black',
                },
                legend: 'none'
            };
            var chart = new google.visualization.PieChart(document.getElementById('donut_single'));
            chart.draw(data, options);
        };
    </script>


    <script type="text/javascript">


        $("#NextDay").click(function() {
            $.ajax({
                type: "POST",
                url: "/Game?handler=NextDay",
                data: { "date": '@Model.stocks[@Model.CurrDayIndex].Date' },
                contentType: 'application/x-www-form-urlencoded',
                dataType: "json",
                headers:
                {
                    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function(message) {
                    document.getElementById("result").innerHTML = message;

                }
            });

        });

        $("#btnSubmit").click(function() {

            // ***************** Radio Button Logic Placeholder ******************************
            if (document.getElementById("buyRadioBtn").checked) 
            {
                document.getElementById("result").innerHTML = "Buy";
                var option = 0;
            } 
            else if (document.getElementById("sellRadioBtn").checked) 
            {
                document.getElementById("result").innerHTML = "Sell";
                var option = 1;
            } 
            else if (document.getElementById("holdRadioBtn").checked) 
            {
                document.getElementById("result").innerHTML = "Hold";
                var option = 2;
            } 
            else {
                alert("You must select an Option");
                return;
            }


            //var amount = document.getElementById('txtQuantity').value;
            // check witch radio button was clicked here and run a different ajax method for each one.
            var test = "test";
            var amount = document.getElementById("myRange").value;
            $.ajax({
                type: "POST",
                url: "/Game?handler=Purchase",
                data: { "amount": amount, "option":option },
                contentType: 'application/x-www-form-urlencoded',
                dataType: "json",
                headers:
                {
                    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function(message) {

                    var amountInStocks = message.stocksOwned * message.stocks[message.currDayIndex].cost;
                    
                    document.getElementById("startDate").innerHTML = "Starting Day Day: " + message.stocks[0].date;
                    document.getElementById("currentDate").innerHTML = "Current Day: " + message.stocks[message.currDayIndex].date;
                    document.getElementById("currentBal").innerHTML = "Current Balance: $" + message.currMoney;
                    document.getElementById("stocksOwned").innerHTML = "Stocks Currently Owned: " + message.stocksOwned;
                    document.getElementById("ownedStocksCost").innerHTML = "Cost of all the stocks you own: " + amountInStocks;
                    document.getElementById("stockPrice").innerHTML = "Stock Price for today: $" + message.stocks[message.currDayIndex].cost;

                    //var obj = JSON.parse(message);
                    //document.getElementById("result").innerHTML = obj.currMoney;
                    //alert(JSON.stringify(message.currMoney));

                    //alert(JSON.stringify(message.stocks));

                   
                }
            });
        });

    </script>

    <script type="text/javascript">
        initialDraw();
        function initialDraw() {
            var purchase = 0;
            var adjustAmount = @Model.CurrMoney;
            var chart = new Highcharts.Chart({

                chart: {
                    renderTo: 'container',
                    animation: true
                },

                title: {
                    text: 'Transaction Details'
                },

                xAxis: {
                    categories: ['Transaction Amount', 'Adjusted Funds']
                },

                plotOptions: {
                    series: {
                        point: {
                            events: {

                                drag: function(e) {
                                    // Returning false stops the drag and drops. Example:
                                    /*
                                    if (e.newY > 300) {
                                        this.y = 300;
                                        return false;
                                    }
                                    */


                                    purchase = Highcharts.numberFormat(e.y, 2);
                                    adjustAmount = @Model.CurrMoney - purchase;
                                    refreshDraw(adjustAmount, purchase);
                                    $('#drag').html(
                                        'Dragging <b>' + this.series.name + '</b>, <b>' + this.category + '</b> to <b>' + purchase + '</b>');
                                },
                                drop: function() {
                                    purchase = Highcharts.numberFormat(this.y, 2);
                                    adjustAmount = @Model.CurrMoney - purchase;
                                    refreshDraw(adjustAmount, purchase);
                                }
                            }
                        },
                        stickyTracking: false
                    },
                },

                tooltip: {
                    yDecimals: 2
                },

                series: [{
                    data: [adjustAmount, purchase],
                    //draggableX: true,
                    draggableY: true,
                    dragMinY: 0,
                    type: 'column',
                    minPointLength: 2
                }]

            });
        };
        function refreshDraw(adjustAmount, purchase) {
            var chart = new Highcharts.Chart({

                chart: {
                    renderTo: 'container',
                    animation: true
                },

                title: {
                    text: 'Transaction Details'
                },

                xAxis: {
                    categories: ['Transaction Amount', 'Adjusted Funds']
                },

                plotOptions: {
                    series: {
                        point: {
                            events: {

                                drag: function(e) {
                                    // Returning false stops the drag and drops. Example:
                                    /*
                                    if (e.newY > 300) {
                                        this.y = 300;
                                        return false;
                                    }
                                    */


                                    purchase = Highcharts.numberFormat(e.y, 2);
                                    adjustAmount = @Model.CurrMoney - purchase;
                                    refreshDraw(adjustAmount, purchase);
                                    $('#drag').html(
                                        'Dragging <b>' + this.series.name + '</b>, <b>' + this.category + '</b> to <b>' + purchase + '</b>');
                                },
                                drop: function() {
                                    purchase = Highcharts.numberFormat(this.y, 2);
                                    adjustAmount = @Model.CurrMoney - purchase;
                                    refreshDraw(adjustAmount, purchase);
                                }
                            }
                        },
                        stickyTracking: false
                    },
                },

                tooltip: {
                    yDecimals: 2
                },

                series: [{
                    data: [adjustAmount, purchase],
                    //draggableX: true,
                    draggableY: true,
                    dragMinY: 0,
                    type: 'column',
                    minPointLength: 2
                }]

            });
        };
    </script>

}
